services:
  web:
    container_name: trusted-web-main
    build:
      context: .
      dockerfile: dockerFiles/api_docker
    depends_on:
      - elasticsearch
      - mongo
    env_file:
      - .env
    command: >
      sh -c "python manage.py migrate &&
             python manage.py createsuperuser --no-input || true &&
             python manage.py cronjob_manager &
             gunicorn trustly.wsgi:application --bind 0.0.0.0:8070 --reload"
    volumes:
      - .:/app
      - static_volume:/app/static
    expose:
      - "8070"
    environment:
      NLTK_DATA: /root/nltk_data
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 128M

  elasticsearch:
    container_name: trusted-web-elastic
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.5
    environment:
      - discovery.type=single-node
      - network.host=0.0.0.0
      - http.port=9400
      - ELASTIC_USERNAME=${ELASTIC_ROOT_USERNAME}
      - ELASTIC_PASSWORD=${ELASTIC_ROOT_PASSWORD}
      - xpack.security.enabled=false
      - xpack.security.transport.ssl.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    env_file:
      - .env
    ports:
      - "9400:9400"
    volumes:
      - esdata:/usr/share/elasticsearch/data
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 128M
    healthcheck:
      test: curl -f http://localhost:9400/_cluster/health || exit 1
      interval: 10s
      timeout: 5s
      retries: 3

  redis_server:
    container_name: trusted-WEB-redis
    image: redis:7.4.0
    logging:
      driver: none
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
    restart: always
    env_file:
      - .env
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 128M
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  nginx:
    container_name: trusted-web-nginx
    image: nginx:latest
    ports:
      - "8080:80"
    depends_on:
      - web
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - static_volume:/app/static
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 128M

  mongo:
    image: mongo:latest
    container_name: trustly-web-mongodb
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
    ports:
      - "27020:27017"
    volumes:
      - mongodata:/data/db
    command: >
      bash -c "
      mongod --bind_ip_all --fork --logpath /var/log/mongodb.log &&
      sleep 10 &&
      mongosh --eval '
        db = db.getSiblingDB(\"admin\");
        if (db.getUser(\"${MONGO_ROOT_USERNAME}\") === null) {
          db.createUser({
            user: \"${MONGO_ROOT_USERNAME}\",
            pwd: \"${MONGO_ROOT_PASSWORD}\",
            roles: [{ role: \"userAdminAnyDatabase\", db: \"admin\" }, { role: \"readWriteAnyDatabase\", db: \"admin\" }]
          });
        }
      ' &&
      mongod --shutdown &&
      sleep 5 &&
      mongod --auth --bind_ip_all --fork --logpath /var/log/mongodb.log &&
      tail -f /var/log/mongodb.log
      "
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 128M

volumes:
  esdata:
  mongodata:
  static_volume:
